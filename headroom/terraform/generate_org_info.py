"""
Organization Info Terraform Generation Module

Generates Terraform configuration files for AWS Organizations structure data
to support SCP/RCP deployment targeting.
"""

import logging
from pathlib import Path
from typing import Dict, List

import boto3  # type: ignore

from ..aws.organization import analyze_organization_structure
from ..types import OrganizationHierarchy, AccountOrgPlacement

# Set up logging
logger = logging.getLogger(__name__)


def generate_terraform_org_info(session: boto3.Session, output_path: str) -> None:
    """
    Generate grab_org_info.tf file with organization structure data sources.

    Args:
        session: AWS session with Organizations API access
        output_path: Path to write the Terraform file
    """
    logger.info("Generating Terraform organization info file")

    try:
        organization_hierarchy = analyze_organization_structure(session)
        logger.info(f"Found {len(organization_hierarchy.organizational_units)} OUs and {len(organization_hierarchy.accounts)} accounts")
    except RuntimeError as e:
        logger.error(f"Failed to analyze organization structure: {e}")
        return

    # Generate Terraform content
    terraform_content = _generate_terraform_content(organization_hierarchy)

    # Write to file
    output_file = Path(output_path)
    output_file.parent.mkdir(parents=True, exist_ok=True)

    try:
        with open(output_file, 'w') as f:
            f.write(terraform_content)
        logger.info(f"Successfully generated Terraform file: {output_path}")
    except IOError as e:
        logger.error(f"Failed to write Terraform file: {e}")


def _generate_terraform_content(organization_hierarchy: OrganizationHierarchy) -> str:
    """
    Generate Terraform content with data sources derived from root_ou, no hardcoded IDs.

    Args:
        organization_hierarchy: Organization structure data from analyze_organization_structure()

    Returns:
        Complete Terraform configuration as string
    """
    content_parts = [
        "# Auto-generated Terraform configuration for AWS Organizations structure",
        "# Generated by Headroom for SCP/RCP deployment targeting",
        "",
        "# Get the root OU ID",
        'data "aws_organizations_organization" "org" {}',
        "",
        'data "aws_organizations_organizational_units" "root_ou" {',
        "  parent_id = data.aws_organizations_organization.org.roots[0].id",
        "}",
        "",
        "# Get accounts for each top-level OU",
    ]

    # Generate data sources for accounts in each top-level OU
    if organization_hierarchy.organizational_units:
        top_level_ous = [ou for ou in organization_hierarchy.organizational_units.values() if ou.parent_ou_id is None]

        for ou in top_level_ous:
            safe_name = _make_safe_variable_name(ou.name)
            content_parts.extend([
                f'data "aws_organizations_organizational_unit_child_accounts" "{safe_name}_accounts" {{',
                "  parent_id = [",
                "    for ou in data.aws_organizations_organizational_units.root_ou.children :",
                f"    ou.id if ou.name == \"{ou.name}\"",
                "  ][0]",
                "}",
                "",
            ])

    # Generate local variables that reference the data sources
    content_parts.extend([
        "locals {",
        "  # Validation check for root OU access",
        "  validation_check_root = (length(data.aws_organizations_organization.org.roots) == 1) ? \"All good. This is a no-op.\" : error(\"[Error] Expected exactly 1 root OU, found ${length(data.aws_organizations_organization.org.roots)}\")",
        "",
        "  # Root OU ID",
        "  root_ou_id = data.aws_organizations_organization.org.roots[0].id",
        "",
    ])

    # Generate local variables for OUs
    if organization_hierarchy.organizational_units:
        top_level_ous = [ou for ou in organization_hierarchy.organizational_units.values() if ou.parent_ou_id is None]

        if top_level_ous:
            content_parts.extend([
                "  # Top-level OU IDs by name",
            ])

            for ou in top_level_ous:
                safe_name = _make_safe_variable_name(ou.name)
                content_parts.extend([
                    f"  # Validation for {ou.name} OU",
                    f"  validation_check_{safe_name}_ou = (length([for ou in data.aws_organizations_organizational_units.root_ou.children : ou.id if ou.name == \"{ou.name}\"]) == 1) ? \"All good. This is a no-op.\" : error(\"[Error] Expected exactly 1 {ou.name} OU, found ${{length([for ou in data.aws_organizations_organizational_units.root_ou.children : ou.id if ou.name == \"{ou.name}\"])}}\")",
                    "",
                    f"  top_level_{safe_name}_ou_id = [",
                    "    for ou in data.aws_organizations_organizational_units.root_ou.children :",
                    f"    ou.id if ou.name == \"{ou.name}\"",
                    "  ][0]",
                    "",
                ])

    # Generate local variables for accounts
    if organization_hierarchy.accounts:
        content_parts.extend([
            "  # Account IDs by name",
        ])

        # Group accounts by their top-level parent OU
        accounts_by_top_level_ou: Dict[str, List[AccountOrgPlacement]] = {}
        for account in organization_hierarchy.accounts.values():
            # Find the top-level OU for this account
            top_level_ou_id = account.parent_ou_id
            current_ou_id = account.parent_ou_id

            # Walk up the hierarchy to find the top-level OU
            while current_ou_id in organization_hierarchy.organizational_units:
                current_ou = organization_hierarchy.organizational_units[current_ou_id]
                if current_ou.parent_ou_id is None:
                    top_level_ou_id = current_ou_id
                    break
                current_ou_id = current_ou.parent_ou_id

            if top_level_ou_id not in accounts_by_top_level_ou:
                accounts_by_top_level_ou[top_level_ou_id] = []
            accounts_by_top_level_ou[top_level_ou_id].append(account)

        for top_level_ou_id, accounts in accounts_by_top_level_ou.items():
            if top_level_ou_id in organization_hierarchy.organizational_units:
                ou_name = organization_hierarchy.organizational_units[top_level_ou_id].name
                safe_ou_name = _make_safe_variable_name(ou_name)

                for account in accounts:
                    safe_account_name = _make_safe_variable_name(account.account_name)
                    content_parts.extend([
                        f"  # Validation for {account.account_name} account",
                        f"  validation_check_{safe_account_name}_account = (length([for account in data.aws_organizations_organizational_unit_child_accounts.{safe_ou_name}_accounts.accounts : account.id if account.name == \"{account.account_name}\"]) == 1) ? \"All good. This is a no-op.\" : error(\"[Error] Expected exactly 1 {account.account_name} account, found ${{length([for account in data.aws_organizations_organizational_unit_child_accounts.{safe_ou_name}_accounts.accounts : account.id if account.name == \"{account.account_name}\"])}}\")",
                        "",
                        f"  {safe_account_name}_account_id = [",
                        f"    for account in data.aws_organizations_organizational_unit_child_accounts.{safe_ou_name}_accounts.accounts :",
                        f"    account.id if account.name == \"{account.account_name}\"",
                        "  ][0]",
                        "",
                    ])

    content_parts.append("}")

    return "\n".join(content_parts) + "\n"


def _make_safe_variable_name(name: str) -> str:
    """
    Convert a name to a safe Terraform variable name.

    Args:
        name: Original name

    Returns:
        Safe variable name with special characters replaced
    """
    # Replace spaces and special characters with underscores
    safe_name = name.lower().replace(" ", "_").replace("-", "_")
    # Remove any remaining special characters except underscores
    safe_name = "".join(c if c.isalnum() or c == "_" else "_" for c in safe_name)
    # Remove multiple consecutive underscores
    while "__" in safe_name:
        safe_name = safe_name.replace("__", "_")
    # Remove leading/trailing underscores
    safe_name = safe_name.strip("_")
    # Ensure it starts with a letter
    if safe_name and not safe_name[0].isalpha():
        safe_name = "ou_" + safe_name
    return safe_name
