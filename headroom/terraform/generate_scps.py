"""
SCPs Terraform Generation Module

Generates Terraform files for SCP deployment based on compliance analysis recommendations.
"""

import logging
from pathlib import Path
from typing import Dict, List

from .utils import make_safe_variable_name
from ..types import OrganizationHierarchy, SCPPlacementRecommendations

# Set up logging
logger = logging.getLogger(__name__)


def generate_scp_terraform(
    recommendations: List[SCPPlacementRecommendations],
    organization_hierarchy: OrganizationHierarchy,
    output_dir: str = "test_environment/scps"
) -> None:
    """
    Generate Terraform files for SCP deployment based on recommendations.

    Args:
        recommendations: List of SCP placement recommendations
        organization_hierarchy: Organization structure information
        output_dir: Directory to write Terraform files to
    """
    if not recommendations:
        return

    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)

    # Group recommendations by level and target
    account_recommendations: Dict[str, List[SCPPlacementRecommendations]] = {}
    ou_recommendations: Dict[str, List[SCPPlacementRecommendations]] = {}
    root_recommendations: List[SCPPlacementRecommendations] = []

    for rec in recommendations:
        if rec.recommended_level == "account":
            for account_id in rec.affected_accounts:
                if account_id not in account_recommendations:
                    account_recommendations[account_id] = []
                account_recommendations[account_id].append(rec)
        elif rec.recommended_level == "ou" and rec.target_ou_id:
            if rec.target_ou_id not in ou_recommendations:
                ou_recommendations[rec.target_ou_id] = []
            ou_recommendations[rec.target_ou_id].append(rec)
        elif rec.recommended_level == "root":
            root_recommendations.append(rec)

    # Generate Terraform files for each account
    for account_id, account_recs in account_recommendations.items():
        account_info = organization_hierarchy.accounts.get(account_id)
        if not account_info:
            logger.warning(f"Account {account_id} not found in organization hierarchy")
            continue

        # Convert account name to terraform-friendly format using same logic as generate_org_info.py
        account_name = make_safe_variable_name(account_info.account_name)
        filename = f"{account_name}_scps.tf"
        filepath = output_path / filename

        # Generate Terraform content
        terraform_content = f'''# Auto-generated SCP Terraform configuration for {account_info.account_name}
# Generated by Headroom based on compliance analysis

module "scps_{account_name}" {{
  source = "../modules/scps"
  target_id = local.{account_name}_account_id

'''

        # Add SCP flags based on recommendations
        for rec in account_recs:
            if rec.compliance_percentage == 100.0:  # Only enable if 100% compliant
                check_name_terraform = rec.check_name.replace("-", "_")
                terraform_content += f"  # {rec.check_name}\n"
                terraform_content += f"  {check_name_terraform} = true\n"

        terraform_content += "}\n"

        # Write the file
        with open(filepath, 'w') as f:
            f.write(terraform_content)

        logger.info(f"Generated SCP Terraform file: {filepath}")

    # Generate Terraform files for each OU
    for ou_id, ou_recs in ou_recommendations.items():
        ou_info = organization_hierarchy.organizational_units.get(ou_id)
        if not ou_info:
            logger.warning(f"OU {ou_id} not found in organization hierarchy")
            continue

        # Convert OU name to terraform-friendly format using same logic as generate_org_info.py
        ou_name = make_safe_variable_name(ou_info.name)
        filename = f"{ou_name}_ou_scps.tf"
        filepath = output_path / filename

        # Generate Terraform content
        terraform_content = f'''# Auto-generated SCP Terraform configuration for OU {ou_info.name}
# Generated by Headroom based on compliance analysis

module "scps_{ou_name}_ou" {{
  source = "../modules/scps"
  target_id = local.top_level_{ou_name}_ou_id

'''

        # Add SCP flags based on recommendations
        for rec in ou_recs:
            if rec.compliance_percentage == 100.0:  # Only enable if 100% compliant
                check_name_terraform = rec.check_name.replace("-", "_")
                terraform_content += f"  # {rec.check_name}\n"
                terraform_content += f"  {check_name_terraform} = true\n"

        terraform_content += "}\n"

        # Write the file
        with open(filepath, 'w') as f:
            f.write(terraform_content)

        logger.info(f"Generated SCP Terraform file: {filepath}")

    # Generate Terraform file for root level
    if not root_recommendations:
        return

    filename = "root_scps.tf"
    filepath = output_path / filename

    # Generate Terraform content
    terraform_content = '''# Auto-generated SCP Terraform configuration for Organization Root
# Generated by Headroom based on compliance analysis

module "scps_root" {
  source = "../modules/scps"
  target_id = local.root_ou_id

'''

    # Add SCP flags based on recommendations
    for rec in root_recommendations:
        if rec.compliance_percentage == 100.0:  # Only enable if 100% compliant
            check_name_terraform = rec.check_name.replace("-", "_")
            terraform_content += f"  # {rec.check_name}\n"
            terraform_content += f"  {check_name_terraform} = true\n"

    terraform_content += "}\n"

    # Write the file
    with open(filepath, 'w') as f:
        f.write(terraform_content)

    logger.info(f"Generated SCP Terraform file: {filepath}")
